// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: profiles.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (id, created_at, updated_at, name)
VALUES (
    $1,
    now(),
    now(),
    $2
)
RETURNING id, name, created_at, updated_at
`

type CreateProfileParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile, arg.ID, arg.Name)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE
FROM profiles
WHERE id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const getAllProfiles = `-- name: GetAllProfiles :many
SELECT id, name, created_at, updated_at FROM profiles
`

func (q *Queries) GetAllProfiles(ctx context.Context) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, getAllProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileById = `-- name: GetProfileById :one
SELECT id, name, created_at, updated_at
FROM profiles
WHERE id = $1
`

func (q *Queries) GetProfileById(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileById, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileByName = `-- name: GetProfileByName :one
SELECT id, name, created_at, updated_at
FROM profiles
WHERE name = $1
`

func (q *Queries) GetProfileByName(ctx context.Context, name string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByName, name)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfilesByNamePattern = `-- name: GetProfilesByNamePattern :many
SELECT id, name, created_at, updated_at
FROM profiles
WHERE name LIKE $1
`

func (q *Queries) GetProfilesByNamePattern(ctx context.Context, name string) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, getProfilesByNamePattern, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfilesCount = `-- name: GetProfilesCount :one
SELECT COUNT(*)
FROM profiles
`

func (q *Queries) GetProfilesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProfilesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateProfileByID = `-- name: UpdateProfileByID :one
UPDATE profiles
SET name       = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateProfileByIDParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateProfileByID(ctx context.Context, arg UpdateProfileByIDParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfileByID, arg.ID, arg.Name)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
