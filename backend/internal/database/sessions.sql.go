// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, created_at, updated_at)
VALUES (
    $1,
    $2,
    now(),
    now()
)
RETURNING id, user_id, created_at, updated_at
`

type CreateSessionParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllSessions = `-- name: DeleteAllSessions :exec
DELETE FROM sessions
`

func (q *Queries) DeleteAllSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getActiveSession = `-- name: GetActiveSession :one
SELECT id, user_id, created_at, updated_at FROM sessions
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetActiveSession(ctx context.Context) (Session, error) {
	row := q.db.QueryRowContext(ctx, getActiveSession)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, created_at, updated_at FROM sessions
WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
