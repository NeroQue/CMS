// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: modules.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createModule = `-- name: CreateModule :one
INSERT INTO modules (
    id,
    course_id,
    title,
    description,
    relative_path,
    "order"
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, course_id, title, description, relative_path, "order", created_at, updated_at
`

type CreateModuleParams struct {
	ID           uuid.UUID
	CourseID     uuid.UUID
	Title        string
	Description  sql.NullString
	RelativePath string
	Order        int32
}

func (q *Queries) CreateModule(ctx context.Context, arg CreateModuleParams) (Module, error) {
	row := q.db.QueryRowContext(ctx, createModule,
		arg.ID,
		arg.CourseID,
		arg.Title,
		arg.Description,
		arg.RelativePath,
		arg.Order,
	)
	var i Module
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Title,
		&i.Description,
		&i.RelativePath,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteModule = `-- name: DeleteModule :exec
DELETE FROM modules
WHERE id = $1
`

func (q *Queries) DeleteModule(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteModule, id)
	return err
}

const getModule = `-- name: GetModule :one
SELECT id, course_id, title, description, relative_path, "order", created_at, updated_at FROM modules
WHERE id = $1
`

func (q *Queries) GetModule(ctx context.Context, id uuid.UUID) (Module, error) {
	row := q.db.QueryRowContext(ctx, getModule, id)
	var i Module
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Title,
		&i.Description,
		&i.RelativePath,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listModulesByCourse = `-- name: ListModulesByCourse :many
SELECT id, course_id, title, description, relative_path, "order", created_at, updated_at FROM modules
WHERE course_id = $1
ORDER BY "order" ASC
`

func (q *Queries) ListModulesByCourse(ctx context.Context, courseID uuid.UUID) ([]Module, error) {
	rows, err := q.db.QueryContext(ctx, listModulesByCourse, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Module
	for rows.Next() {
		var i Module
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.Title,
			&i.Description,
			&i.RelativePath,
			&i.Order,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateModule = `-- name: UpdateModule :one
UPDATE modules
SET
    title = $2,
    description = $3,
    "order" = $4,
    updated_at = now()
WHERE id = $1
RETURNING id, course_id, title, description, relative_path, "order", created_at, updated_at
`

type UpdateModuleParams struct {
	ID          uuid.UUID
	Title       string
	Description sql.NullString
	Order       int32
}

func (q *Queries) UpdateModule(ctx context.Context, arg UpdateModuleParams) (Module, error) {
	row := q.db.QueryRowContext(ctx, updateModule,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Order,
	)
	var i Module
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Title,
		&i.Description,
		&i.RelativePath,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
