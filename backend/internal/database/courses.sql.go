// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: courses.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
    id,
    title,
    description,
    creator_id,
    relative_path
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, title, description, creator_id, relative_path, created_at, updated_at
`

type CreateCourseParams struct {
	ID           uuid.UUID
	Title        string
	Description  sql.NullString
	CreatorID    uuid.NullUUID
	RelativePath string
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourse,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.CreatorID,
		arg.RelativePath,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatorID,
		&i.RelativePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM courses
WHERE id = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCourse, id)
	return err
}

const getCourse = `-- name: GetCourse :one
SELECT id, title, description, creator_id, relative_path, created_at, updated_at FROM courses
WHERE id = $1
`

func (q *Queries) GetCourse(ctx context.Context, id uuid.UUID) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatorID,
		&i.RelativePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT id, title, description, creator_id, relative_path, created_at, updated_at FROM courses
ORDER BY created_at DESC
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatorID,
			&i.RelativePath,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCoursesByCreator = `-- name: ListCoursesByCreator :many
SELECT id, title, description, creator_id, relative_path, created_at, updated_at FROM courses
WHERE creator_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListCoursesByCreator(ctx context.Context, creatorID uuid.NullUUID) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCoursesByCreator, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatorID,
			&i.RelativePath,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE courses
SET
    title = $2,
    description = $3,
    updated_at = now()
WHERE id = $1
RETURNING id, title, description, creator_id, relative_path, created_at, updated_at
`

type UpdateCourseParams struct {
	ID          uuid.UUID
	Title       string
	Description sql.NullString
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, updateCourse, arg.ID, arg.Title, arg.Description)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatorID,
		&i.RelativePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
