// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: content_items.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createContentItem = `-- name: CreateContentItem :one
INSERT INTO content_items (
    id,
    module_id,
    title,
    description,
    relative_path,
    content_type,
    duration,
    size,
    "order"
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, module_id, title, description, relative_path, content_type, duration, size, "order", created_at, updated_at
`

type CreateContentItemParams struct {
	ID           uuid.UUID
	ModuleID     uuid.UUID
	Title        string
	Description  sql.NullString
	RelativePath string
	ContentType  string
	Duration     sql.NullInt32
	Size         sql.NullInt64
	Order        int32
}

func (q *Queries) CreateContentItem(ctx context.Context, arg CreateContentItemParams) (ContentItem, error) {
	row := q.db.QueryRowContext(ctx, createContentItem,
		arg.ID,
		arg.ModuleID,
		arg.Title,
		arg.Description,
		arg.RelativePath,
		arg.ContentType,
		arg.Duration,
		arg.Size,
		arg.Order,
	)
	var i ContentItem
	err := row.Scan(
		&i.ID,
		&i.ModuleID,
		&i.Title,
		&i.Description,
		&i.RelativePath,
		&i.ContentType,
		&i.Duration,
		&i.Size,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContentItem = `-- name: DeleteContentItem :exec
DELETE FROM content_items
WHERE id = $1
`

func (q *Queries) DeleteContentItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteContentItem, id)
	return err
}

const getContentItem = `-- name: GetContentItem :one
SELECT id, module_id, title, description, relative_path, content_type, duration, size, "order", created_at, updated_at FROM content_items
WHERE id = $1
`

func (q *Queries) GetContentItem(ctx context.Context, id uuid.UUID) (ContentItem, error) {
	row := q.db.QueryRowContext(ctx, getContentItem, id)
	var i ContentItem
	err := row.Scan(
		&i.ID,
		&i.ModuleID,
		&i.Title,
		&i.Description,
		&i.RelativePath,
		&i.ContentType,
		&i.Duration,
		&i.Size,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listContentItemsByModule = `-- name: ListContentItemsByModule :many
SELECT id, module_id, title, description, relative_path, content_type, duration, size, "order", created_at, updated_at FROM content_items
WHERE module_id = $1
ORDER BY "order" ASC
`

func (q *Queries) ListContentItemsByModule(ctx context.Context, moduleID uuid.UUID) ([]ContentItem, error) {
	rows, err := q.db.QueryContext(ctx, listContentItemsByModule, moduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContentItem
	for rows.Next() {
		var i ContentItem
		if err := rows.Scan(
			&i.ID,
			&i.ModuleID,
			&i.Title,
			&i.Description,
			&i.RelativePath,
			&i.ContentType,
			&i.Duration,
			&i.Size,
			&i.Order,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContentItem = `-- name: UpdateContentItem :one
UPDATE content_items
SET
    title = $2,
    description = $3,
    content_type = $4,
    duration = $5,
    "order" = $6,
    updated_at = now()
WHERE id = $1
RETURNING id, module_id, title, description, relative_path, content_type, duration, size, "order", created_at, updated_at
`

type UpdateContentItemParams struct {
	ID          uuid.UUID
	Title       string
	Description sql.NullString
	ContentType string
	Duration    sql.NullInt32
	Order       int32
}

func (q *Queries) UpdateContentItem(ctx context.Context, arg UpdateContentItemParams) (ContentItem, error) {
	row := q.db.QueryRowContext(ctx, updateContentItem,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.ContentType,
		arg.Duration,
		arg.Order,
	)
	var i ContentItem
	err := row.Scan(
		&i.ID,
		&i.ModuleID,
		&i.Title,
		&i.Description,
		&i.RelativePath,
		&i.ContentType,
		&i.Duration,
		&i.Size,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
